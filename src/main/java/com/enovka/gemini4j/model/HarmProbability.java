package com.enovka.gemini4j.model;

import com.enovka.gemini4j.model.type.HarmProbabilityEnum;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * Represents the probability that a piece of content generated by the Gemini
 * API is harmful according to the API's safety classification system. This
 * class provides a structured way to access the harm probability assessment,
 * allowing developers to evaluate the safety level of the generated content.
 * Note that this probability only indicates the likelihood of harm and does not
 * reflect the severity of the potential harm.
 *
 * @author Everson Novka &lt;enovka@gmail.com&gt;
 * @since 0.0.2
 */
@Data
@Builder(setterPrefix = "with", toBuilder = true)
@NoArgsConstructor
@AllArgsConstructor
public class HarmProbability {

    /**
     * The specific harm probability level, as determined by the Gemini API's
     * safety classification system, represented by the
     * {@link HarmProbabilityEnum}. For example, a value of
     * {@link HarmProbabilityEnum#HIGH} indicates a high probability of harm.
     */
    @JsonProperty("probability")
    private HarmProbabilityEnum probability; // Use HarmProbabilityEnum directly

    /**
     * Creates a `HarmProbability` instance from a JSON string representing the
     * harm probability.
     *
     * @param probability The JSON string representing the harm probability.
     * @return A `HarmProbability` instance with the harm probability set from
     * the JSON string.
     * @since 0.2.0
     * @deprecated This method is deprecated as the `probability` field is now
     * of type {@link HarmProbabilityEnum}.
     */
    @Deprecated(since = "0.2.0", forRemoval = true)
    public static HarmProbability fromJsonString(String probability) {
        return HarmProbability.builder()
                .withProbability(HarmProbabilityEnum.valueOf(probability))
                .build();
    }
}